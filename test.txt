"""
                        ######################################################
                        # FIGURA 2: ANÁLISIS ECONÓMICO (MRP vs COSTO)
                        ######################################################
                        st.subheader("Optimización Económica (MRP vs Costo)")

                        # Precios (ajustar según tus datos)
                        P_qoil = 70  # Precio por barril de petróleo (USD/bbl)
                        P_qgl = 5    # Costo por Mscf de gas inyectado (USD/Mscf)

                        fig_mrp = make_subplots(
                            rows=2, 
                            cols=3, 
                            subplot_titles=[f"Well {pozo.nombre_pozo}" for pozo in optimizacion.pozos],
                            horizontal_spacing=0.1,
                            vertical_spacing=0.15
                        )

                        for idx, (well_data, pozo) in enumerate(zip(results['plot_data'], optimizacion.pozos)):
                            row = (idx // 3) + 1
                            col = (idx % 3) + 1
                            
                            # Calcular MRP
                            delta_q_gl = np.diff(well_data["q_gl_range"])
                            delta_q_oil = np.diff(well_data["q_oil_predicted"])
                            mp = delta_q_oil / delta_q_gl
                            mrp = P_qoil * mp  # Marginal Revenue Product
                            qgl_values = well_data["q_gl_range"][:-1]  # Valores de qgl para el MRP

                            # --- Gráfico principal ---
                            # 1. Curva MRP
                            fig_mrp.add_trace(
                                go.Scatter(
                                    x=qgl_values,
                                    y=mrp,
                                    mode='lines',
                                    name='MRP (USD/Mscf)',
                                    line=dict(width=3, color='#636EFA'),
                                    showlegend=True if idx == 0 else False,
                                    legendgroup='group1'
                                ),
                                row=row, col=col
                            )
                            
                            # 2. Línea de costo (wage)
                            fig_mrp.add_hline(
                                y=P_qgl,
                                line=dict(width=2, color='#EF553B', dash='dash'),
                                annotation_text=f"Costo Gas: {P_qgl} USD/Mscf",
                                annotation_position="top right",
                                row=row, col=col
                            )
                            
                            # --- Encontrar y marcar intersección (qgl óptimo) ---
                            # Buscar el punto donde MRP >= P_qgl por última vez
                            optimal_idx = np.where(mrp >= P_qgl)[0][-1] if any(mrp >= P_qgl) else len(mrp)-1
                            qgl_optimo = qgl_values[optimal_idx]
                            mrp_optimo = mrp[optimal_idx]
                            
                            # 3. Línea vertical del óptimo
                            fig_mrp.add_vline(
                                x=qgl_optimo,
                                line=dict(width=2, color='#00CC96', dash='dot'),
                                annotation_text=f"Óptimo: {qgl_optimo:.1f} Mscf",
                                annotation_position="top left",
                                row=row, col=col
                            )
                            
                            # 4. Punto de intersección
                            fig_mrp.add_trace(
                                go.Scatter(
                                    x=[qgl_optimo],
                                    y=[mrp_optimo],
                                    mode='markers',
                                    marker=dict(size=10, color='#FFA15A', symbol='x'),
                                    name='Punto óptimo',
                                    showlegend=True if idx == 0 else False,
                                    legendgroup='group2'
                                ),
                                row=row, col=col
                            )
                            
                            # --- Configuración de ejes ---
                            fig_mrp.update_xaxes(
                                title_text="Inyección de gas (q_gl)", 
                                row=row, col=col,
                                gridcolor=grid_color,
                                tickfont=dict(color=text_color),
                                title_font=dict(color=text_color),
                                range=[0, max(qgl_values)*1.1]  # Ajuste de rango para visualización
                            )
                            
                            fig_mrp.update_yaxes(
                                title_text="MRP (USD/Mscf)", 
                                row=row, col=col,
                                gridcolor=grid_color,
                                tickfont=dict(color=text_color),
                                title_font=dict(color=text_color),
                                range=[0, max(mrp)*1.1]  # Ajuste de rango para visualización
                            )

                        # Layout general
                        fig_mrp.update_layout(
                            height=800,
                            width=1200,
                            plot_bgcolor=bg_color,
                            paper_bgcolor=bg_color,
                            font=dict(color=text_color),
                            legend=dict(
                                orientation="h",
                                yanchor="bottom",
                                y=1.02,
                                xanchor="right",
                                x=1
                            ),
                            margin=dict(l=50, r=50, b=80, t=100, pad=4)
                        )

                        st.plotly_chart(fig_mrp, use_container_width=True)"""